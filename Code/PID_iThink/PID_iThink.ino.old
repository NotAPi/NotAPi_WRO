#include <NewPing.h>
#include <PID_v1.h>
#include <Servo.h> // Include the Servo library

// Pin definitions
#define TRIGGER_PIN1  3
#define ECHO_PIN1     2
#define TRIGGER_PIN2  5
#define ECHO_PIN2     4
#define TRIGGER_PIN3  7
#define ECHO_PIN3     6
#define MaxDistance   150

// Motor Control Pins
#define IN1_PIN       9
#define IN2_PIN       8
#define ENABLE_PIN    10

// Servo Control
Servo steeringServo;
#define SERVO_PIN 11

// Sensor Setup
NewPing sonarRight(TRIGGER_PIN1, ECHO_PIN1, MaxDistance);
NewPing sonarFront(TRIGGER_PIN2, ECHO_PIN2, MaxDistance);
NewPing sonarLeft(TRIGGER_PIN3, ECHO_PIN3, MaxDistance);

// PID Setup
double Setpoint, Input, Output;
double Kp = 1, Ki = 0.05, Kd = 0.25;
PID myPID(&Input, &Output, &Setpoint, Kp, Ki, Kd, DIRECT);

void setup() {
  Serial.begin(9600);

  // Motor Control Pins Setup
  pinMode(IN1_PIN, OUTPUT);
  pinMode(IN2_PIN, OUTPUT);
  pinMode(ENABLE_PIN, OUTPUT);

  // Set initial motor state
  digitalWrite(IN1_PIN, LOW);
  digitalWrite(IN2_PIN, LOW);
  analogWrite(ENABLE_PIN, 0);

  // Servo Setup
  steeringServo.attach(SERVO_PIN);

  Setpoint = 0; // Target is to be centered (no difference between right and left distances)
  myPID.SetMode(AUTOMATIC);

  // Debug: Test each sensor individually
  Serial.println("Testing each sensor:");
  Serial.print("Right Sensor: ");
  Serial.println(sonarRight.ping_cm());
  Serial.print("Left Sensor: ");
  Serial.println(sonarLeft.ping_cm());
  Serial.print("Front Sensor: ");
  Serial.println(sonarFront.ping_cm());
}

void loop() {
  // Read distances
  int distanceRight = sonarRight.ping_cm();
  int distanceLeft = sonarLeft.ping_cm();

  // Calculate the error
  Input = distanceRight - distanceLeft;

  // Compute PID output
  myPID.Compute();

  // Adjust motor speed and direction based on PID output
  // adjustMotor(Output);
  adjustMotor(Input);

  // Adjust servo based on PID output (steering)
  // adjustServo(Output);

  // Optional: Debugging information
  Serial.print("Right: ");
  Serial.print(distanceRight);
  Serial.print(" cm, Left: ");
  Serial.print(distanceLeft);
  Serial.print(" cm, Error: ");
  Serial.print(Input);
  Serial.print(", PID Output: ");
  Serial.println(Output);

  delay(100); // Wait for a short time before the next reading
}

// Function to adjust motor based on PID output
void adjustMotor(double output) {
  // Set the direction (120 mid)
  if (output < 0) {
    // Turn right
    steeringServo.write(140);
  } else if (output > 0) {
    // Turn left
    steeringServo.write(100);
  } else {
    // Go straight
    steeringServo.write(120);
  }

  // Control speed (absolute value of output)
  // int speed = constrain(abs(output), 0, 255); // Limit the speed to 0-255
  analogWrite(ENABLE_PIN, 125);
  digitalWrite(IN1_PIN, HIGH);
  digitalWrite(IN2_PIN, LOW);
}

// Function to adjust the servo based on PID output
void adjustServo(double output) {
  // Map the output range (-255 to 255) to servo angle range (70 to 170)
  int angle = output;

  // Write the mapped angle to the servo
  steeringServo.write(angle);
}
